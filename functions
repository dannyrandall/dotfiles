#!/usr/bin/env bash

function gitt() {
	if [ -z "$1" ]; then
		echo "No commit message supplied"
	else
		git add -v -A
		git commit -m $1
		git push
	fi
}

function extract {
    if [ -z "$1" ]; then
    # display usage if no parameters given
		echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    else
		if [ -f $1 ] ; then
			NAME=${1%.*}
			mkdir $NAME && cd $NAME
			case $1 in
				*.tar.bz2)   tar xvjf ../$1    ;;
				*.tar.gz)    tar xvzf ../$1    ;;
				*.tar.xz)    tar xvJf ../$1    ;;
				*.lzma)      unlzma ../$1      ;;
				*.bz2)       bunzip2 ../$1     ;;
				*.rar)       unrar x -ad ../$1 ;;
				*.gz)        gunzip ../$1      ;;
				*.tar)       tar xvf ../$1     ;;
				*.tbz2)      tar xvjf ../$1    ;;
				*.tgz)       tar xvzf ../$1    ;;
				*.zip)       unzip ../$1       ;;
				*.Z)         uncompress ../$1  ;;
				*.7z)        7za e ../$1       ;;
				*.xz)        unxz ../$1        ;;
				*.exe)       cabextract ../$1  ;;
				*)           echo "extract: '$1' - unknown archive method" ;;
		esac
	else
		echo "$1 - file does not exist"
	fi
fi
}

function up {
	LIMIT=$1
	P=$PWD
	for ((i=1; i <= LIMIT; i++)); do
		P=$P/..
	done
	cd $P
}

function mstatus {
    echo -e "API: \n"
    curl "http://$1:8000/mstatus"
    echo -e "\n\n"

    echo -e "TouchPanel: \n"
    curl "http://$1:8888/mstatus"
    echo -e "\n\n"

    echo -e "Router: \n"
    curl "http://$1:7000/mstatus"
    echo -e "\n\n"

    echo -e "Translator: \n"
    curl "http://$1:6998/mstatus"
    echo -e "\n\n"
}

function board {
    uname=$(lpass show --password "Shared-The Cube/env-vars/PI_SSH_USERNAME")
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $uname@$1
}

function sink {
    uname=$(lpass show --password "Shared-The Cube/env-vars/PI_SSH_USERNAME")
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $uname@$1 'sudo reboot'
}

function fixpitime {
    uname=$(lpass show --password "Shared-The Cube/env-vars/PI_SSH_USERNAME")
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $uname@$1 'sudo ntpdate-debian && date'
}

function floatship {
    address=$(lpass show --password "Shared-The Cube/env-vars/RASPI_DEPLOYMENT_MICROSERVICE_WSO2_ADDRESS")
    header=$(lpass show --password "Shared-The Cube/env-vars/RASPI_DEPLOYMENT_MICROSERVICE_WSO2_HEADER")
    curl -X GET --header "Accept: application/json" --header "$header" "$address"_device/$1
}

function floatfleet {
    address=$(lpass show --password "Shared-The Cube/env-vars/RASPI_DEPLOYMENT_MICROSERVICE_WSO2_ADDRESS")
    header=$(lpass show --password "Shared-The Cube/env-vars/RASPI_DEPLOYMENT_MICROSERVICE_WSO2_HEADER")
    curl -X GET --header "Accept: application/json" --header "$header" "$address"/Pi3/$1
}

function updatedb {
    curl -X GET "http://$1:7012/replication/start"
}

function refresh {
    curl -X PUT "http://$1:8888/refresh"
}

function spyglass {
    google-chrome-stable "http://$1.byu.edu:8888/"      # open new chrome tab
    wid=$(xdotool search --desktop 0 --class "google-chrome" | tail -n1)
    xdotool windowactivate --sync $wid          # change focus to chrome
    xdotool windowactivate --sync $wid key F12  # open dev tools
}

function apiup {
    if [[ $# -eq 0 ]]; then
        echo 'must include a pi hostname to emulate'
        return 1
    fi

    export PI_HOSTNAME=$1
    if [[ $# -eq 1 ]]; then
        # default to using dev tag
        TAG="development"
    fi

    if [[ $# -eq 2 ]]; then
        TAG=$2

        if [[ $TAG = *"prod"* ]]; then
            TAG="latest"
        fi
    fi

    echo "spinning up av-api $TAG containers as $1...."
    env DOCKER_HUB_TAG=$TAG docker-compose -f $GOPATH/src/github.com/byuoitav/av-api/docker-compose-pull.yml pull 
    env DOCKER_HUB_TAG=$TAG docker-compose -f $GOPATH/src/github.com/byuoitav/av-api/docker-compose-pull.yml up -d
}

function schedulingup {
    if [[ $# -eq 0 ]]; then
        echo 'must include a pi hostname to emulate'
        return 1
    fi

    export PI_HOSTNAME=$1
    if [[ $# -eq 1 ]]; then
        # default to using dev tag
        TAG="development"
    fi

    if [[ $# -eq 2 ]]; then
        TAG=$2

        if [[ $TAG = *"prod"* ]]; then
            TAG="latest"
        fi
    fi

    echo "spinning up scheduling $TAG containers as $1...."
    env DOCKER_HUB_TAG=$TAG docker-compose -f $GOPATH/src/github.com/byuoitav/scheduling/docker-compose.yml pull 
    env DOCKER_HUB_TAG=$TAG docker-compose -f $GOPATH/src/github.com/byuoitav/scheduling/docker-compose.yml up -d
}

function apidown {
    docker-compose -f $GOPATH/src/github.com/byuoitav/av-api/docker-compose-pull.yml down -t 0
}

function schedulingdown {
    docker-compose -f $GOPATH/src/github.com/byuoitav/scheduling/docker-compose.yml down -t 0
}
